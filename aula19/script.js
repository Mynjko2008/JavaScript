// DOM = Document Object Model
// Esta aula ensina a capturar, validar e manipular dados de formul√°rios usando eventos em JavaScript

// Selecionando elementos do DOM
const formCadastro = document.getElementById('form-cadastro'); // Formul√°rio principal
const inputNome = document.getElementById('nome'); // Campo de nome
const inputEmail = document.getElementById('email'); // Campo de e-mail
const inputSenha = document.getElementById('senha'); // Campo de senha

const divMensagem = document.getElementById('mensagem'); // Onde aparecer√£o mensagens de erro
const divResultado = document.getElementById('resultado'); // Onde aparecer√£o os dados preenchidos

// üîÑ Exemplo adicional: confirma√ß√£o de senha
// Criamos um novo campo no HTML (com ID: senha-confirmacao) e capturamos aqui
const inputSenhaConfirmacao = document.createElement('input'); // Criando dinamicamente o campo
inputSenhaConfirmacao.type = 'password';
inputSenhaConfirmacao.id = 'senha-confirmacao';
inputSenhaConfirmacao.placeholder = 'Confirme sua senha';
inputSenhaConfirmacao.style.marginTop = '0.5rem';
formCadastro.insertBefore(inputSenhaConfirmacao, formCadastro.querySelector('button')); // Inserido antes do bot√£o

// üîÑ Exemplo adicional: checkbox de termos e condi√ß√µes
const termosContainer = document.createElement('div');
const checkboxTermos = document.createElement('input');
checkboxTermos.type = 'checkbox';
checkboxTermos.id = 'termos';
checkboxTermos.style.marginRight = '0.5rem';

const labelTermos = document.createElement('label');
labelTermos.textContent = 'Aceito os termos de uso';
labelTermos.setAttribute('for', 'termos');
labelTermos.style.fontSize = '0.95rem';

termosContainer.style.marginTop = '1rem';
termosContainer.style.display = 'flex';
termosContainer.style.alignItems = 'center';

termosContainer.appendChild(checkboxTermos);
termosContainer.appendChild(labelTermos);
formCadastro.insertBefore(termosContainer, formCadastro.querySelector('button')); // Inserido antes do bot√£o

// Adicionando o evento 'submit' ao formul√°rio
formCadastro.addEventListener('submit', function(evento) {
    evento.preventDefault(); // Impede o envio padr√£o do formul√°rio e recarregamento da p√°gina

    // Capturando os valores digitados
    const nome = inputNome.value.trim(); // Remove espa√ßos vazios
    const email = inputEmail.value.trim();
    const senha = inputSenha.value.trim();
    const senhaConfirmacao = inputSenhaConfirmacao.value.trim();
    const aceitouTermos = checkboxTermos.checked; // true ou false

    // Valida√ß√£o: campos obrigat√≥rios
    if(nome === '' || email === '' || senha === '' || senhaConfirmacao === '') {
        divMensagem.textContent = '‚ö†Ô∏è Todos os campos s√£o obrigat√≥rios.';
        divResultado.innerHTML = '';
        return;
    }

    // Valida√ß√£o: senha e confirma√ß√£o devem ser iguais
    if(senha !== senhaConfirmacao) {
        divMensagem.textContent = '‚ö†Ô∏è A senha e a confirma√ß√£o n√£o coincidem.';
        divResultado.innerHTML = '';
        return;
    }

    // Valida√ß√£o: e-mail simples com express√£o regular (regex)
    const emailValido = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    if(!emailValido) {
        divMensagem.textContent = '‚ö†Ô∏è O e-mail informado √© inv√°lido.';
        divResultado.innerHTML = '';
        return;
    }

    // Valida√ß√£o: aceitar os termos √© obrigat√≥rio
    if(!aceitouTermos) {
        divMensagem.textContent = '‚ö†Ô∏è Voc√™ precisa aceitar os termos de uso.';
        divResultado.innerHTML = '';
        return;
    }

    // Se passou em todas as valida√ß√µes, limpa a mensagem de erro
    divMensagem.textContent = '';

    // Exibindo os dados como pr√©via
    divResultado.innerHTML = `
        <p>‚úÖ Cadastro realizado com sucesso!</p>
        <p><strong>Nome:</strong> ${nome}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Senha:</strong> ${'*'.repeat(senha.length)}</p>
    `;

    // Limpa os campos do formul√°rio
    formCadastro.reset();
});

// OBSERVA√á√ÉO:
// - .checked verifica se um checkbox est√° marcado (true/false)
// - A regex b√°sica para validar e-mails cobre a maioria dos casos reais
// - Criar elementos dinamicamente permite adaptar a estrutura da p√°gina sem precisar editar o HTML
// - Use insertBefore() para adicionar um elemento antes de outro dentro do DOM
// - Este formul√°rio agora simula uma l√≥gica completa de cadastro
